mysql day02
1. 什么查询 
   对数据进行筛选
   
2. 查询的机制   
  从上到下，将整个表的数据进行筛选
  
3.简单的查询
  select 具体的列名 from 表名
  select * from 表名
  示例：
  SELECT studentNo,studentName FROM student
  SELECT * FROM student
  -- 列计算
SELECT studentName,age+6 FROM student
SELECT CONCAT(studentName,'思密达'),age FROM student

-- 去重复
SELECT DISTINCT * FROM student
SELECT DISTINCT sex FROM student
SELECT DISTINCT sex,age FROM student 

-- 选取指定的行   limit 开始行数(从0开始)，返回行数
SELECT * FROM student
SELECT * FROM student LIMIT 4,2

-- 选择操作
-- 单条件
SELECT studentName FROM student WHERE sex <> '女'
SELECT * FROM student WHERE age>18
-- 条件不止是=号还可以是，>,<,>=,<=或者!=,<>

-- 复合条件
-- 多条件时，and或or,对条件进行组合
SELECT * FROM student WHERE sex= '女' AND age>16
SELECT * FROM student WHERE studentNo=2 OR studentNo=4

-- 条件范围的查询   18 - 40  

SELECT * FROM student WHERE age >=18 AND age <=40

-- 1. between  开始数字 and 结束的数字
SELECT * FROM student WHERE age BETWEEN 18 AND 40

-- 开始数字不能大于结束的数字，如果大于，不会报错，只是没有数据

-- 2. in/not in
SELECT * FROM student WHERE studentNo=2 OR studentNo=4 OR studentNo=6

SELECT * FROM student WHERE studentNo IN (2,4,5)
-- in里是值的集合，之间关系是or
SELECT * FROM student WHERE address IN ('南充','绵阳','都江堰') -- 相当于or
SELECT * FROM student WHERE address NOT IN ('南充','绵阳','都江堰')-- 相当于and


-- 模糊查询

SELECT * FROM student WHERE studentName LIKE '%刘%'
SELECT * FROM student WHERE studentName LIKE '刘__'
 -- %：任意长度的任意字符
 -- 下划线_ : 任意的一个字符
 
 -- 列的重命名
SELECT studentName AS '姓名' FROM student 
 
  -- 排序
  SELECT * FROM student ORDER BY age DESC
  -- asc 升序，可省略，desc 降序列
  SELECT * FROM student ORDER BY studentNo DESC,age DESC
  
  
  -- 聚合查询:
  -- 什么是聚合函数（ 统计）
  -- 数量(count())，最大值(max())，最小值(min())，平均值(avg())，总值(sum())
  -- 聚合函数特点：
  -- 1. 结果有且仅有一个值（单行单列）
  -- 2. 统计对应列不为Null数量
  -- 注：聚合函数返回的是单行，不要和多行的列写在一起
  
  SELECT 
	  MAX(age) AS '最大值',
	  MIN(age) AS '最小值',
	  AVG(age) AS '平均值',
	  SUM(age) AS '和',
	  COUNT(1) AS '数量',
  FROM result
  WHERE studentName = '刘星'
  
  -- 执行顺序：from -> where -> select（投影） 
  -- 需求：
  -- 每一组，考试成绩的平均值，总和，人数，最大值，最小值
  
   
  -- 分组统计， group by  
  SELECT * FROM student 
  SELECT COUNT(*) FROM student GROUP BY sex HAVING COUNT(*)>3
  
   完整SQL:
  select 
  from 
  where
  group by 
  having
  order by 
  limit 
  
  顺序 ：from -> where -> select -> group by ->
   having -> order by ->limit
  
  ===================================================
  下午
  1. 子查询
  2. 联合查询
  3. 三大范式
  
  1. 子查询
     什么是子查询(一个查询中嵌套别一个查询)
	 
	 from -> where -> select -> group by ->
   having -> order by ->limit ,这些关键字后，都可以添加子查询
   
   
   select 中添加子查询（单行单列）
   注：效率比较低，父查询的每一条，都对应执行子查询一遍
   
   重点：from中添加子查询(多行多列)
   注：from 子查询必须写别名
   
   where条件中添加子查询
   select * from student
   where studentNO in (select studentNO from 成绩表 where 成绩<60)
  
  
  2. 表连接
   分类：
    内连接  inner join -> join 
	原理：
	   求两个表的公共部分
	   SELECT 列1,列2 FROM 表1 JOIN 表2 ON 表1.列=表2.列 
				               join 表3 on 表1.列 = 表3.列
	 第二种方法
      select 列  from 表1，表2， 表3
      where 表1.列=表2.列  and 表1.列 = 表3.列 
        
    外连接  outer join 
	   左外  left outer join  -> left jojn
	   右外  right outer join  -> right join 
	 原理： 
        left join ,关键字左边的表全部显示，右边没有对应的数据以Null填充	 
	    right join , 关键字右边的表全部显示，右边没有对应的数据以Null填充	 
	   
    自连接（自己连接自己）
	select 员.*,上.姓名 as '上司姓名' from 员工表 as 员 join 员工表 as 上 where 员.上司id = 上.员工id
	
  
 三大范式
 1NF : 行不能重复，列不能再分（原子性）
      注：列能不能分，根据实际项目来
	  
 2NF：满足1NF条件，非主键列必须完全依赖主键列	 

 3NF: 满足2NF条件，非主键与主键列之间，只有直接关系，没有间接关系

 （是否有数据重复、是否有利操作） 
   
   
   nodejs （后端语言） -- javascript
   
   复习： 1、BS工作原理 
          2、 mysql作业
		  3、nodejs express预习 
 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  